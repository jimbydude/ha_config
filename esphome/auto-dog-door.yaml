substitutions:
  device: auto_dog_door
  name: Automatic Dog Door
  led_status: GPIO2
  motor_forward_pin: GPIO4
  motor_reverse_pin: GPIO5
  button_pin: GPIO14
  endstop_top_pin: GPIO12
  endstop_bottom_pin: GPIO13
  reboot_timeout: 1h
  update_interval: 10min
  update_interval_memory_usage: 5s
  update_interval_wifi_status: 1min
  update_interval_short: 10s
  logger_baud_rate: "115200"

esphome:
    name: ${device}
    platform: ESP8266
    board: d1_mini
    on_boot:
      priority: -10
      # ...
      then:
        - lambda: |-
            Serial.println(ESP.getFreeHeap(),DEC); 


<<: !include common/wifi.yaml
<<: !include common/api.yaml
<<: !include common/ota.yaml
<<: !include common/text_sensors.yaml
<<: !include common/logger.yaml
<<: !include common/binary_sensors.yaml

#################################################################
# Misc setup
#################################################################
switch:
  - !include common/switch/restart.yaml

sensor:
  - !include common/sensor/uptime.yaml

light:
  - !include common/light/led_status.yaml

output:
  - platform: esp8266_pwm
    id: motor_forward_pin
    pin: ${motor_forward_pin}
  - platform: esp8266_pwm
    id: motor_reverse_pin
    pin: ${motor_reverse_pin}

fan:
  - platform: hbridge
    id: dog_door
    name: "Dog Door Motor"
    pin_a: motor_forward_pin
    pin_b: motor_reverse_pin
    decay_mode: slow

binary_sensor:
  # Button to toggle motor direction
  - platform: gpio
    id: toggle_button
    pin:
      number: ${button_pin}
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      then:
        - lambda: |-
            if (id(endstop_top).state) {
              // Door is at the top, move it down
              auto call = id(dog_door).turn_on();
              call.set_direction(fan::FanDirection::REVERSE);
              call.perform();
            } else if (id(endstop_bottom).state) {
              // Door is at the bottom, move it up
              auto call = id(dog_door).turn_on();
              call.set_direction(fan::FanDirection::FORWARD);
              call.perform();
            } else {
              // Door is in the middle, toggle the direction
              if (id(dog_door).direction == fan::FanDirection::FORWARD) {
                auto call = id(dog_door).turn_on();
                call.set_direction(fan::FanDirection::REVERSE);
                call.perform();
              } else {
                auto call = id(dog_door).turn_on();
                call.set_direction(fan::FanDirection::FORWARD);
                call.perform();
              }
            }

  # Endstop at the top
  - platform: gpio
    id: endstop_top
    pin:
      number: ${endstop_top_pin}
      mode: INPUT_PULLUP
      inverted: False
    on_press:
      then:
        - fan.turn_off: dog_door
    on_release:
      then:
        - logger.log: "Endstop Top Released: No action taken"

  # Endstop at the bottom
  - platform: gpio
    id: endstop_bottom
    pin:
      number: ${endstop_bottom_pin}
      mode: INPUT_PULLUP
      inverted: False
    on_press:
      then:
        - fan.turn_off: dog_door
    on_release:
      then:
        - logger.log: "Endstop bottom Released: No action taken"
