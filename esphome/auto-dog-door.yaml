substitutions:
  device: auto_dog_door
  name: Automatic Dog Door
  led_status: GPIO2
  motor_forward_pin: GPIO4
  motor_reverse_pin: GPIO5
  button_pin: GPIO14
  endstop_top_pin: GPIO12
  endstop_bottom_pin: GPIO13
  reboot_timeout: 1h
  update_interval: 10min
  update_interval_memory_usage: 5s
  update_interval_wifi_status: 1min
  update_interval_short: 10s
  logger_baud_rate: "115200"

globals:
  - id: is_blocked
    type: bool
    restore_value: no
    initial_value: "false"
  - id: is_locked
    type: bool
    restore_value: no
    initial_value: "false"
  - id: door_state
    type: std::string
    restore_value: no
    initial_value: '"Closed"'

esphome:
  name: ${device}
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: -10
    then:
      - lambda: |-
          ESP_LOGD("boot", "Free heap: %d", ESP.getFreeHeap());
      - delay: 2s
      - script.execute: open_door  # Run open_door script on boot

<<: !include common/wifi.yaml
<<: !include common/api.yaml
<<: !include common/ota.yaml
<<: !include common/logger.yaml
<<: !include common/text_sensors.yaml
<<: !include common/binary_sensors.yaml

light:
  - !include common/light/led_status.yaml

text_sensor:
  - platform: template
    id: door_state_sensor  # Add an ID for manual updates
    name: "Door State"
    lambda: |-
      return {std::string(id(door_state))};

script:
  # Set Blocked/Unblocked
  - id: set_blocked
    parameters:
      state: bool
    then:
      - lambda: |-
          id(is_blocked) = state;
          if (state) {
            ESP_LOGD("set_blocked", "Path is BLOCKED.");
          } else {
            ESP_LOGD("set_blocked", "Path is UNBLOCKED.");
          }
      - if:
          condition:
            lambda: "return state;"  # Only open if blocked
          then:
            - script.execute: open_door

  # Lock/Unlock Door
  - id: set_locked
    parameters:
      state: bool
    then:
      - lambda: |-
          id(is_locked) = state;
          if (state) {
            ESP_LOGD("set_locked", "Door is BLOCKED.");
          } else {
            ESP_LOGD("set_locked", "Door is UNLOCKED.");
          }

  # Open Door
  - id: open_door
    then:
      - lambda: |-
          if (id(is_locked)) {
            ESP_LOGD("open_door", "System is LOCKED! Cannot open.");
            return;
          }
          ESP_LOGD("open_door", "Opening the door...");
          id(door_state) = "Opening";  // Set door state to "Opening"
          auto call = id(dog_door).turn_on();
          call.set_direction(fan::FanDirection::FORWARD);
          call.perform();
      - text_sensor.template.publish:
          id: door_state_sensor
          state: !lambda 'return id(door_state).c_str();'  # Dynamically publish the current value

  # Close Door
  - id: close_door
    then:
      - lambda: |-
          if (id(is_locked)) {
            ESP_LOGD("close_door", "System is LOCKED! Cannot close.");
            return;
          }
          ESP_LOGD("close_door", "Closing the door...");
          id(door_state) = "Closing";  // Set door state to "Closing"
          auto call = id(dog_door).turn_on();
          call.set_direction(fan::FanDirection::REVERSE);
          call.perform();
      - text_sensor.template.publish:
          id: door_state_sensor
          state: !lambda 'return id(door_state).c_str();'  # Dynamically publish the current value

switch:
  - !include common/switch/restart.yaml

  - platform: template
    name: "Lock Dog Door"
    lambda: |-
      return id(is_locked);
    turn_on_action:
      - script.execute:
          id: set_locked
          state: true
    turn_off_action:
      - script.execute:
          id: set_locked
          state: false

button:
  - platform: template
    name: "Reverse Dog Door Direction"
    on_press:
      then:
        - lambda: |-
            if (id(dog_door).direction == fan::FanDirection::FORWARD) {
              ESP_LOGD("reverse_button", "Reversing to close the door...");
              id(close_door).execute();  // Call the close_door script
            } else {
              ESP_LOGD("reverse_button", "Reversing to open the door...");
              id(open_door).execute();  // Call the open_door script
            }

sensor:
  - !include common/sensor/uptime.yaml

  - platform: adc
    pin: A0
    name: "Photodiode Sensor"
    update_interval: 5s
    filters:
      - multiply: 3.3
    on_value:
      then:
        - if:
            condition:
              lambda: "return x < 2.00;"  # Threshold for block detection
            then:
              - if:
                  condition:
                    lambda: "return x < 2.00 && !id(endstop_top).state;"  # Check block and top endstop
                  then:
                    - script.execute:
                        id: set_blocked
                        state: true
                    - script.execute: open_door  # Open door only if not already at the top
            else:
              - script.execute:
                  id: set_blocked
                  state: false

output:
  - platform: esp8266_pwm
    id: motor_forward_pin
    pin: ${motor_forward_pin}
  - platform: esp8266_pwm
    id: motor_reverse_pin
    pin: ${motor_reverse_pin}

fan:
  - platform: hbridge
    id: dog_door
    name: "Dog Door Motor"
    pin_a: motor_forward_pin
    pin_b: motor_reverse_pin
    decay_mode: slow
    on_speed_set:
      then:
        - lambda: |-
            auto speed = id(dog_door).speed;  // Get the current speed
            if (speed == 0.33f) {
              ESP_LOGD("fan", "Speed set to LOW (33%)");
              // Logic for LOW speed (e.g., adjust PWM externally if needed)
            } else if (speed == 0.66f) {
              ESP_LOGD("fan", "Speed set to MEDIUM (66%)");
              // Logic for MEDIUM speed
            } else if (speed == 1.0f) {
              ESP_LOGD("fan", "Speed set to HIGH (100%)");
              // Logic for HIGH speed
            }

binary_sensor:
  - platform: gpio
    id: toggle_button
    name: "Physical Button"
    pin:
      number: ${button_pin}
      mode: INPUT_PULLUP
      inverted: true
    device_class: opening  # Optional: Adds a door-like icon in HA   
    on_press:
      then:
        - lambda: |-
            if (id(dog_door).direction == fan::FanDirection::FORWARD) {
              ESP_LOGD("toggle_button", "Reversing to close the door...");
              id(close_door).execute();  // Call close_door script
            } else {
              ESP_LOGD("toggle_button", "Reversing to open the door...");
              id(open_door).execute();  // Call open_door script
            }

# The physical micro switches being used as endstops.
# Doing using lambda since UI will display state inverted, eg ON would mean OPEN
  - platform: gpio
    id: endstop_top
    name: "Top Endstop"
    pin:
      number: ${endstop_top_pin}
      mode: INPUT_PULLUP
      inverted: false  # Keep this false to align UI states with physical behavior
    device_class: opening
    on_state:
      then:
        - if:
            condition:
              lambda: "return !id(endstop_top).state;"
            then:
              - logger.log: "Top endstop pressed (Closed)"
              - lambda: id(door_state) = std::string("Closed");
              - fan.turn_off: dog_door
            else:
              - logger.log: "Top endstop released (Open)"
              - lambda: |-
                  if (!id(endstop_bottom).state) {
                    id(door_state) = "Closing";
                  }
        - text_sensor.template.publish:
            id: door_state_sensor
            state: !lambda 'return id(door_state).c_str();'  # Dynamically publish the current value

  - platform: gpio
    id: endstop_bottom
    name: "Bottom Endstop"
    pin:
      number: ${endstop_bottom_pin}
      mode: INPUT_PULLUP
      inverted: false
    device_class: opening
    on_state:
      then:
        - if:
            condition:
              lambda: "return !id(endstop_bottom).state;"
            then:
              - logger.log: "Bottom endstop pressed (Closed)"
              - lambda: id(door_state) = std::string("Closed");
              - fan.turn_off: dog_door
            else:
              - logger.log: "Bottom endstop released (Open)"
              - lambda: |-
                  if (!id(endstop_top).state) {
                    id(door_state) = "Opening";
                  }
        - text_sensor.template.publish:
            id: door_state_sensor
            state: !lambda 'return id(door_state).c_str();'  # Dynamically publish the current value
